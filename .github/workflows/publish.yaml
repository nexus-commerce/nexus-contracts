name: Publish Go Module

on:
  push:
    tags:
      - 'v*.*.*' # Запускати тільки при створенні тегу, напр. v1.2.3

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout contracts repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.5'

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Show buf.gen.yaml content
        run: cat buf.gen.yaml

      - name: Generate Go code from Protobuf (Verbose)
        run: buf generate proto --include-imports -v # Додали -v для детального виводу

      - name: Show directory contents after generate
        run: ls -R

      - name: Push generated code to nexus-contracts-go
        run: |
          # Налаштовуємо Git з токеном для аутентифікації
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          
          # Клонуємо репозиторій для згенерованого коду
          git clone https://${{ secrets.GH_PAT }}@github.com/nexus-commerce/nexus-contracts-go.git ../nexus-contracts-go
          
          # Копіюємо згенерований код, замінюючи старий
          cp -r gen/* ../nexus-contracts-go/
          
          cd ../nexus-contracts-go

          go mod init github.com/nexus-commerce/nexus-contracts-go || true

          go mod edit -replace=github.com/nexus-commerce/nexus-contracts-go=./

          go mod tidy
          
          # Перевіряємо, чи є взагалі будь-які зміни (включно з новими файлами)
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit."
            exit 0
          fi
          
          # Створюємо та пушимо коміт і тег
          git add .
          git commit -m "feat(gen): sync generated Go module to version ${{ github.ref_name }}"
          git tag ${{ github.ref_name }} # Створюємо такий самий тег, як і в contracts
          
          # Оскільки репозиторій може бути порожнім, 'main' може не існувати.
          # Ця команда безпечно створить 'main' або запушить у 'main', якщо він є.
          git push origin HEAD:main 
          
          git push origin ${{ github.ref_name }}
